{"version":3,"sources":["commonStyles.js","constants.js","device_mdl.js","data_provider.js","App.js","index.js"],"names":["CHART_CONFIG","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","strokeWidth","barPercentage","useShadowColorFromDataset","MQTT_MAP","SystemLog","display","resetReason","espFwRevision","TiFwRevision","wifiRxSignaldB","heartBeat","dropboxId","serviceMode","timeZone","maxTmrBackoff","siteName","installLocation","waterSource","siteNotes","pipeType","transmitFrequency","numOfExcitationPulses","gainControl","envelopeCrossingThreshold","startADCsamplingCount","sampleSize","attenEnabled","devices","Device","id","this","status","events","system","metadata","params","sysProp","msg","CONST","metaProp","paramProp","eventTypePathArr","eventType","join","push","type","data","JSON","parse","console","log","e","message","topic","elms","split","subtopic","updateSystemProp","updateMetadataProp","updateParamProp","updateEventProp","slice","s","t","length","devStr","startsWith","devIdStr","extractDeviceString","notify_tmo","callbacks","MQTT_CNX","mqtt","connect","on","count","toString","device","getDeviceForTopic","updateFromRx","clearTimeout","setTimeout","notify","err","arg2","subscribe","warn","alert","debug","getDevices","i","cb","unsubscribe","idxToRemove","splice","screenWidth","Dimensions","get","width","screenHeight","height","EMPTY_BAR_DATA","labels","datasets","colors","getChartWidth","CommonBarChart","props","horizLines","View","style","styles","chartContainer","chartWrap","Text","chartHeader","title","key","Math","random","marginVertical","borderRadius","chartConfig","STYLES","yAxisInterval","segments","yLabelsOffset","withCustomBarColorFromData","flatColor","fromZero","withInnerLines","showValuesOnTopOfBars","showBarTops","ConnectedStatusChart","useState","connected","setConnected","disconnected","setDisconnected","handleNewData","connectedDevs","disconnDevs","d","useEffect","DataProv","VersionPieChart","versionCounts","setversionCounts","versionProp","chartTitle","processor","counts","connectedOnly","thisVers","colorMap","countsArr","Object","keys","map","vers","idx","name","legendFontColor","legendFontSize","accessor","backgroundColor","absolute","WifiSignal","wifiSignals","setWifiSignals","signalGroups","thisSignal","parseInt","isNaN","ceil","dataObj","sort","l","verticalLabelRotation","undefined","marginLeft","SideBySideOrStacked","flexDirection","children","Dashboard","flex","margin","alignItems","ScreenHeader","screenHeaderWrap","screenHeader","screenHeaderTxt","Pressable","button","onPress","setConnectedFilter","Ionicons","size","StyleSheet","create","root","minHeight","overflow","justifyContent","padding","shadowColor","shadowOpacity","shadowRadius","paddingRight","fontSize","fontWeight","shadowOffset","container","marginHorizontal","marginBottom","registerRootComponent","setConnectedOnly","SafeAreaView","StatusBar","isFiltered","ScrollView"],"mappings":"2UAIaA,EAAe,CACxBC,uBAAwB,UACxBC,qBAAsB,UACtBC,cAAe,EACfC,MAAO,eAACC,EAAD,uDAAW,EAAX,0BAAqCA,EAArC,KACPC,YAAa,EACbC,cAAe,GACfC,2BAA2B,G,kCCNlBC,EAMD,CACJC,UAAW,CACPC,QAAS,YAEbC,YAAa,CACTD,QAAS,gBAEbE,cAAe,CACXF,QAAS,wBAEbG,aAAc,CACVH,QAAS,wBAEbI,eAAgB,CACZJ,QAAS,eAEbK,UAAW,CACPL,QAAS,kBAEbM,UAAW,CACPN,QAAS,oBAEbO,YAAa,CACTP,QAAS,qBAEbQ,SAAU,CACNR,QAAS,YAEbS,cAAe,CACXT,QAAS,oBAnCRF,EAsCC,CACNY,SAAU,CACNV,QAAS,aAEbW,gBAAiB,CACbX,QAAS,oBAEbY,YAAa,CACTZ,QAAS,aAEba,UAAW,CACPb,QAAS,cAEbc,SAAU,CACNd,QAAS,cApDRF,EAuDD,CACJiB,kBAAmB,CACff,QAAS,aAEbgB,sBAAuB,CACnBhB,QAAS,eAEbiB,YAAa,CACTjB,QAAS,QAEbkB,0BAA2B,CACvBlB,QAAS,sBAEbmB,sBAAuB,CACnBnB,QAAS,mBAEboB,WAAY,CACRpB,QAAS,eAEb,eAAgB,CACZA,QAAS,kBAEbqB,aAAc,CACVrB,QAAS,eAEbc,SAAU,CACNd,QAAS,c,iCCpFjBsB,EAAU,GAEOC,E,WAEjB,WAAYC,GAAK,YACbC,KAAKD,GAAKA,EACVC,KAAKC,OAAS,KACdD,KAAKE,OAAS,GACdF,KAAKG,OAAS,GACdH,KAAKI,SAAW,GAChBJ,KAAKK,OAAS,G,4CAGlB,SAAiBC,EAASC,GACmB,MAArCC,EAAyBF,KAM7BN,KAAKG,OAAOG,GAAWC,K,gCAG3B,SAAmBE,EAAUF,GACmB,MAAxCC,EAA2BC,KAM/BT,KAAKI,SAASK,GAAYF,K,6BAG9B,SAAgBG,EAAWH,GACoB,MAAvCC,EAAyBE,KAM7BV,KAAKK,OAAOK,GAAaH,K,6BAG7B,SAAgBI,EAAkBJ,GAC9B,IAAIK,EAAYD,EAAiBE,KAAK,KAEtCb,KAAKE,OAAOY,KAAK,CAACC,KAAMH,EAAWI,KAAMT,IAEzC,IAAIS,EAAO,KAGX,IAGI,GAAY,OAFZA,EAAOC,KAAKC,MAAMX,IAId,YADAY,QAAQC,IAAI,sCAAuCb,EAAKc,EAAEC,SAGhE,MAAOD,GAEL,YADAF,QAAQC,IAAI,sCAAuCb,EAAKc,EAAEC,SAI7C,UAAbV,IACsB,MAAlBI,EAAI,OACJhB,KAAKC,OAASe,EAAKf,OACW,MAAvBe,EAAK,eACZhB,KAAKG,OAAO1B,cAAgBuC,EAAK,eACJ,MAAtBA,EAAK,gBACZhB,KAAKG,OAAOzB,aAAesC,EAAK,kB,0BAK5C,SAAaO,EAAOhB,GAChB,IAAIiB,EAAOD,EAAME,MAAM,KAEnBC,EAAWF,EAAK,GAEJ,UAAZE,EACA1B,KAAK2B,iBAAiBH,EAAK,GAAIjB,GACZ,YAAZmB,EACP1B,KAAK4B,mBAAmBJ,EAAK,GAAIjB,GACd,UAAZmB,EACP1B,KAAK6B,gBAAgBL,EAAK,GAAIjB,GACX,UAAZmB,GACP1B,KAAK8B,gBAAgBN,EAAKO,MAAM,GAAIxB,K,sBAI5C,WACI,IAAIyB,EAAI,CAAC,4CAMT,IAAK,IAAIC,KALTD,EAAElB,KAAKd,KAAKD,IACZiC,EAAElB,KAAK,4CACPkB,EAAElB,KAAK,WAAad,KAAKC,QAEzB+B,EAAElB,KAAK,6BACOd,KAAKG,OACf6B,EAAElB,KAAKmB,EAAI,KAAOjC,KAAKG,OAAO8B,IAIlC,IAAK,IAAIA,KADTD,EAAElB,KAAK,oBACOd,KAAKI,SACf4B,EAAElB,KAAKmB,EAAI,KAAOjC,KAAKI,SAAS6B,IAIpC,IAAK,IAAIA,KADTD,EAAElB,KAAK,6BACOd,KAAKK,OACf2B,EAAElB,KAAKmB,EAAI,KAAOjC,KAAKK,OAAO4B,IAGlC,OAAOD,EAAEnB,KAAK,S,kCAGlB,SAA2BU,GACvB,IAAIC,EAAOD,EAAME,MAAM,KAEvB,GAAID,EAAKU,QAAU,EACf,OAAO,KAGX,IAAIC,EAASX,EAAK,GAElB,OAAKW,EAAOC,WAAW,OAA0B,GAAjBD,EAAOD,OAKhCC,EAHI,O,+BAMf,SAAyBZ,GACrB,IAAIc,EAAWvC,EAAOwC,oBAAoBf,GAE1C,OAAKc,GAIoB,MAArBxC,EAAQwC,KAMZxC,EAAQwC,GAAY,IAAIvC,EAAOuC,IAJpBxC,EAAQwC,IALR,O,wBAcf,WACI,OAAOxC,M,KCpJX0C,EAAa,KACbC,EAAY,GACVC,EAAWC,IAAKC,QFLpB,mEEOFF,EAASG,GAAG,WAiBZ,SAAqBrB,EAAOD,GAEpBuB,IAAU,KAAO,GACjB1B,QAAQC,IAAIG,EAAOD,EAAQwB,YAI/B,IAAIC,EAASjD,EAAOkD,kBAAkBzB,GAEtC,GAAc,MAAVwB,EAEA,OAIJA,EAAOE,aAAa1B,EAAOD,EAAQwB,YAEnCI,aAAaX,GAGbA,EAAaY,WAAWC,EAAQ,QAnCpCX,EAASG,GAAG,WAAW,SAACS,EAAKC,GACzBnC,QAAQC,IAAI,4BAEZqB,EAASc,UAAU/C,2BAA8B,SAAA6C,GACxCA,GAGHlC,QAAQqC,KAAK,uBACbC,MAAM,uCAAwCJ,IAH9ClC,QAAQuC,MAAM,8BASxB,IAAIb,EAAQ,EAwBZ,SAASO,IACLjC,QAAQC,IAAI,cAIZ,IAFA,IAAIvB,EAAUC,EAAO6D,aAEZC,EAAI,EAAGA,EAAIpB,EAAUN,OAAQ0B,IAClCpB,EAAUoB,GAAG/D,GAKd,SAAS0D,EAAUM,GACtBrB,EAAU1B,KAAK+C,GAGZ,SAASC,EAAYD,GAExB,IADA,IAAIE,GAAe,EACVH,EAAI,EAAGA,EAAIpB,EAAUN,OAAQ0B,IAClC,GAAIpB,EAAUoB,IAAMC,EAAI,CACpBE,EAAcH,EACd,MAIJG,GAAe,GACfvB,EAAUwB,OAAOD,EAAa,G,ikBC1DtC,IAAME,EAAcC,IAAWC,IAAI,UAAUC,MACvCC,EAAeH,IAAWC,IAAI,UAAUG,OAE1CC,EAAiB,CACjBC,OAAQ,GACRC,SAAU,CACN,CACIzD,KAAM,GACN0D,OAAQ,MAKdC,EAAgB,WAClB,OAAIV,EAAc,IACPA,EAAc,EAEdA,EAAc,KAI7B,SAASW,EAAeC,GACpB,IAAIC,EAAa,EAMjB,OAJKD,EAAM7D,MAAS6D,EAAM7D,KAAKkB,SAC3B4C,EAAa,GAIb,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,GAAOC,iBACjB,kBAACH,EAAA,EAAD,CAAMC,MAAOC,GAAOE,WAChB,kBAACC,EAAA,EAAD,CAAMJ,MAAOC,GAAOI,aAAcR,EAAMS,OACxC,kBAAC,IAAD,KACIC,IAAKC,KAAKC,SAAW,GACrBT,MAAO,CACHU,eAAgB,EAChBC,aAAc,IAGlB3E,KAAM6D,EAAM7D,KACZoD,MAAOO,IACPL,OAAQ,IACRsB,YAAaC,EACbC,cAAe,GACfC,SAAUjB,EACVkB,cAAenB,EAAMmB,eAAiB,GACtCC,4BAA0B,EAC1BC,WAAS,EACTC,UAAQ,EACRC,gBAAc,EACdC,uBAAqB,EACrBC,aAAa,GACTzB,MAOxB,SAAS0B,IACL,MAAkCC,mBAAS,IAA3C,WAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,WAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAAgB,SAAChH,GACnB,IAAIiH,EAAgB,GAChBC,EAAc,GAClB,IAAK,IAAIC,KAAKnH,EACe,IAArBA,EAAQmH,GAAG/G,OACX6G,EAAchG,KAAKkG,GAEnBD,EAAYjG,KAAKkG,GAIzBN,EAAaI,GACbF,EAAgBG,IAGpBE,qBAAU,WAENC,EAAmBL,KACpB,IAGH,IAAI7F,EAAO,CACPwD,OAAQ,CAAC,YAAa,gBACtBC,SAAU,CACN,CACIzD,KAAM,CAACyF,EAAUvE,OAAQyE,EAAazE,QACtCwC,OAAQ,CAAC,iBAAM,WAAW,iBAAM,WAK5C,OACI,kBAACE,EAAD,CAAgB5D,KAAMA,EAAMsE,MAAO,sBAI3C,SAAS6B,EAAgBtC,GACrB,MAA0C2B,mBAAS,IAAnD,WAAOY,EAAP,KAAsBC,EAAtB,KAEIC,EAAc,GACdC,EAAa,GACM,OAAnB1C,EAAM2C,WACNF,EAAc,gBACdC,EAAa,mBAEbD,EAAc,eACdC,EAAa,mBAGjB,IAAMV,EAAgB,SAAChH,GACnB,IAAI4H,EAAS,GAEb,IAAK,IAAIT,KAAKnH,EACV,IAAIgF,EAAM6C,eAAsC,IAArB7H,EAAQmH,GAAG/G,OAAtC,CAEA,IAAI0H,EAAW9H,EAAQmH,GAAG7G,OAAOmH,GAQT,MAApBG,EAHAE,EAHCA,EAGU,IAAMA,EAFN,WAMXF,EAAOE,GAAY,EAEnBF,EAAOE,IAAa,EAI5B,IAAIC,EAAW,CAAC,UAAW,UAAW,SAAU,OAAQ,UAAW,UAAW,UAAW,QAErFC,EAAYC,OAAOC,KAAKN,GAAQO,KAAI,SAACC,EAAMC,GAC3C,IAAIlK,EAOJ,OAJIA,EAFAkK,GAAON,EAAS1F,OAER,IAAMsD,KAAKC,SAAS3C,SAAS,IAAIf,OAAO,GAExC6F,EAASM,GAEd,CACHC,KAAK,IAAKF,EAAN,IACJpF,MAAO4E,EAAOQ,GACdjK,MAAOA,EACPoK,gBAAiB,UACjBC,eAAgB,OAIxBhB,EAAiBQ,IAiBrB,OAdAZ,qBAAU,WAENC,EAAmBL,KACpB,IAEHI,qBAAU,WAIN,OAFAJ,EAAc/G,EAAO6D,cAEd,WACHuD,EAAqBL,MAE1B,CAAChC,EAAM6C,gBAGN,kBAAC3C,EAAA,EAAD,CAAMC,MAAO,CAACC,GAAOC,iBACjB,kBAACH,EAAA,EAAD,CAAMC,MAAO,CAACC,GAAOE,YACjB,kBAACC,EAAA,EAAD,CAAMJ,MAAOC,GAAOI,aAAckC,GAClC,kBAAC,IAAD,CACIe,SAAS,QACTtH,KAAMoG,EACNhD,MAAOO,IACPL,OAAQ,IACRsB,YAAaC,EACb0C,gBAAiB,YACjBtC,4BAA0B,EAC1BC,WAAS,EACTsC,UAAQ,MAO5B,SAASC,EAAW5D,GAChB,MAAsC2B,mBAASjC,GAA/C,WAAOmE,EAAP,KAAoBC,EAApB,KAEM9B,EAAgB,SAAChH,GACnB,IAAI+I,EAAe,CAAC,IAAK,GAEzB,IAAK,IAAI5B,KAAKnH,EACV,IAAIgF,EAAM6C,eAAsC,IAArB7H,EAAQmH,GAAG/G,OAAtC,CAEA,IAAI4I,EAAahJ,EAAQmH,GAAG7G,OAAOxB,eACnCkK,EAAaC,SAASD,GAElBE,MAAMF,GACND,EAAa,MAAQ,GAGrBC,EAA0C,GAA7BrD,KAAKwD,KAAKH,EAAa,IAEJ,MAA5BD,EAAaC,GACbD,EAAaC,GAAc,EAE3BD,EAAaC,IAAe,GAKxC,IAAII,EAAO,KAAO1E,GAClB0E,EAAQzE,OAASsD,OAAOC,KAAKa,GAAcM,OAC3CD,EAAQxE,SAAW,CAAC,CACZzD,KAAMiI,EAAQzE,OAAOwD,KAAI,SAAAmB,GAAC,OAAIP,EAAaO,MAC3CzE,OAAQuE,EAAQzE,OAAOwD,KAAI,SAACmB,EAAGjB,GAAJ,OAAY,wBAAiB,GAAJA,EAAb,MAAwB,IAAU,GAAJA,GAA9B,aAI/CS,EAAeM,IAiBnB,OAdAhC,qBAAU,WAENC,EAAmBL,KACpB,IAEHI,qBAAU,WAIN,OAFAJ,EAAc/G,EAAO6D,cAEd,WACHuD,EAAqBL,MAE1B,CAAChC,EAAM6C,gBAGN,kBAAC9C,EAAD,CACIW,IAAK,OACLvE,KAAM0H,EACNpD,MAAO,oBACP8D,sBAAuBnF,EAAc,SAAMoF,EAAY,GACvDrD,cAAe,GACf5B,MAAOH,EAAc,IAAoB,GAAdA,EAAoBA,EAAY,GAC3D2B,YAAW,OACJC,GADI,IAEP1H,cAAe8F,EAAc,IAAM,GAAM,KAE7Ce,MAAO,CACHsE,YAAa,GACblF,MAAOH,EAAc,IAAoB,GAAdA,EAAoBA,EAAY,MAM3E,SAASsF,EAAoB1E,GACzB,OAAIZ,EAAc,IAEV,kBAACc,EAAA,EAAD,CAAMC,MAAO,CAACwE,cAAe,QACxB3E,EAAM4E,UAKR5E,EAAM4E,SAIrB,SAASC,EAAU7E,GACf,OACI,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAC2E,KAAM,EAAGC,OAAQ,EAAGC,WAAY,WAC1C,kBAACtD,EAAD,MACA,kBAACgD,EAAD,KACI,kBAACpC,EAAD,CAAiB5B,IAAKC,KAAKC,SAAW,GAAI+B,UAAU,MAAME,cAAe7C,EAAM6C,gBAC/E,kBAACP,EAAD,CAAiB5B,IAAKC,KAAKC,SAAW,GAAI+B,UAAU,MAAME,cAAe7C,EAAM6C,iBAEnF,kBAACe,EAAD,CAAYlD,IAAKC,KAAKC,SAAW,GAAIiC,cAAe7C,EAAM6C,iBAKtE,SAASoC,GAAajF,GAElB,OACI,kBAACE,EAAA,EAAD,CAAMC,MAAOC,GAAO8E,kBAChB,kBAAChF,EAAA,EAAD,CAAMC,MAAOC,GAAO+E,cAChB,kBAAC5E,EAAA,EAAD,CAAMJ,MAAOC,GAAOgF,iBAApB,mBACA,kBAACC,EAAA,EAAD,CAAWlF,MAAO,CAACC,GAAOkF,OAAQ,CAAC5B,gBAAiB1D,EAAM6C,cAAgB,UAAY,YAClF0C,QAAS,WACLvF,EAAMwF,oBAAoBxF,EAAM6C,iBAGpC,kBAAC4C,EAAA,EAAD,CAAUnC,KAAK,YAAYoC,KAAM,GAAIvM,MAAM,aAyB/D,IAAMiH,GAASuF,IAAWC,OAAO,CAC7BC,KAAM,CACFnC,gBAAiB,QACjBoB,KAAM,GAEVI,iBAAkB,CACdzF,OAASD,EAAe,GAAM,EAC9BsG,UAAW,GACXC,SAAU,UAEdZ,aAAc,CACV1F,OAAQD,EAAe,GACvBsG,UAAW,GACXpC,gBAAiB,QACjBnE,MAAOH,EACP4G,eAAgB,gBAChBhB,WAAY,WACZL,cAAe,MACfsB,QAAS,GACTC,YAAa,OACbC,cAAe,GACfC,aAAc,EACdC,aAAcjH,EAAc,IAAM,GAAK,IAE7CgG,gBAAiB,CACfkB,SAAU,GACVC,WAAY,OACZpN,MAAO,WAETmM,OAAQ,CACNW,QAAS,EACTnF,aAAc,GACdoF,YAAa,OACbC,cAAe,GACfC,aAAc,EACdI,aAAc,CACVjH,MAAO,EACPE,OAAQ,IAGdgH,UAAW,CACT3B,KAAM,EACNpB,gBAAiB,WAEnBrD,eAAgB,CACdS,aAAc,GACd4F,iBAAkB,GAClBC,aAAc,GACdT,YAAa,OACbC,cAAe,GACfC,aAAc,EACdI,aAAc,CACVjH,MAAO,EACPE,OAAQ,IAGda,UAAW,CACT2F,QAAS,GACTnF,aAAc,GACd4C,gBAAiB,UACjBqC,SAAU,UAEZvF,YAAa,CACX8F,SAAU,GACVL,QAAS,EACTU,aAAc,GACdJ,WAAY,OACZpN,MJnZc,aKOlByN,aDuTe,WACb,MAA0CjF,oBAAS,GAAnD,WAAOkB,EAAP,KAAsBgE,EAAtB,KAEA,OACE,kBAACC,EAAA,EAAD,CAAc3G,MAAOC,GAAOyF,MACxB,kBAAC3F,EAAA,EAAD,CAAMC,MAAOC,GAAOqG,WACpB,kBAACM,EAAA,EAAD,CAAW5G,MAAM,SACjB,kBAAC8E,GAAD,CAAcpC,cAAeA,EAAe2C,mBAAoB,SAACwB,GAAD,OACxDH,EAAiBG,MAEzB,kBAACC,EAAA,EAAD,KACI,kBAACpC,EAAD,CAAWhC,cAAeA,Y","file":"static/js/app.6c04a38e.chunk.js","sourcesContent":["export const COLORS = {\n    darkGreyText: \"#535353\"\n}\n\nexport const CHART_CONFIG = {\n    backgroundGradientFrom: '#FFFFFF',\n    backgroundGradientTo: '#FFFFFF',\n    decimalPlaces: 0,\n    color: (opacity = 1) => `rgba(80, 80, 80, ${opacity})`,\n    strokeWidth: 0, // optional, default 3\n    barPercentage: 0.8,\n    useShadowColorFromDataset: false // optional\n};","export const BROKER =\n  'wss://dizzofac:Qbz5ly_pY0MS@stellar-lifeguard.cloudmqtt.com:443';\n\nexport const MQTT_MAIN_TOPIC = \"/AWACS_ADC_vAf5hLnp6J\"\n\nexport const MQTT_MAP = {\n    events: {\n        status: {\n            display: \"Last Status\"\n        }\n    },\n    system: {\n        SystemLog: {\n            display: \"Last Log\"\n        },\n        resetReason: {\n            display: \"Reset Reason\"\n        },\n        espFwRevision: {\n            display: \"ESP Firmware Version\"\n        },\n        TiFwRevision: {\n            display: \"MSP Firmware Version\"\n        },\n        wifiRxSignaldB: {\n            display: \"Wifi Signal\"\n        },\n        heartBeat: {\n            display: \"Last Heartbeat\"\n        },\n        dropboxId: {\n            display: \"Dropbox Instance\"\n        },\n        serviceMode: {\n            display: \"Service Mode Flag\"\n        },\n        timeZone: {\n            display: \"Timezone\"\n        },\n        maxTmrBackoff: {\n            display: \"Max TMR Backoff\"\n        },\n    },\n    metadata: {\n        siteName: {\n            display: \"Site Name\"\n        },\n        installLocation: {\n            display: \"Install Location\"\n        },\n        waterSource: {\n            display: \"Municipal\"\n        },\n        siteNotes: {\n            display: \"Site Notes\"\n        },\n        pipeType: {\n            display: \"Pipe Type\"\n        },\n    },\n    params: {\n        transmitFrequency: {\n            display: \"Frequency\"\n        },\n        numOfExcitationPulses: {\n            display: \"Pulse Count\"\n        },\n        gainControl: {\n            display: \"Gain\"\n        },\n        envelopeCrossingThreshold: {\n            display: \"Envelope Threshold\"\n        },\n        startADCsamplingCount: {\n            display: \"Start ADC Count\"\n        },\n        sampleSize: {\n            display: \"Window Size\"\n        },\n        \"3V3TxVoltage\": {\n            display: \"3V3 TX Voltage\"\n        },\n        attenEnabled: {\n            display: \"Attenuation\"\n        },\n        pipeType: {\n            display: \"Pipe Type\"\n        },\n    }\n};","import * as CONST from \"./constants\";\n\nlet devices = {};\n\nexport default class Device {\n\n    constructor(id) {\n        this.id = id;\n        this.status = null;\n        this.events = [];\n        this.system = {};\n        this.metadata = {};\n        this.params = {};\n    }\n\n    updateSystemProp(sysProp, msg) {\n        if (CONST.MQTT_MAP[\"system\"][sysProp] == null) {\n            // invalid system property. ignore\n            // console.log(\"invalid system property: \", sysProp);\n            return;\n        }\n\n        this.system[sysProp] = msg;\n    }\n\n    updateMetadataProp(metaProp, msg) {\n        if (CONST.MQTT_MAP[\"metadata\"][metaProp] == null) {\n            // invalid system property. ignore\n            // console.log(\"invalid metadata property: \", metaProp);\n            return;\n        }\n\n        this.metadata[metaProp] = msg;\n    }\n\n    updateParamProp(paramProp, msg) {\n        if (CONST.MQTT_MAP[\"params\"][paramProp] == null) {\n            // invalid system property. ignore\n            // console.log(\"invalid params property: \", paramProp);\n            return;\n        }\n\n        this.params[paramProp] = msg;\n    }\n\n    updateEventProp(eventTypePathArr, msg) {\n        let eventType = eventTypePathArr.join(\".\");\n\n        this.events.push({type: eventType, data: msg});\n\n        let data = null;\n\n        // parse message as json\n        try {\n            data = JSON.parse(msg);\n\n            if (data == null) {\n                console.log(\"Failed to parse event msg as json: \", msg, e.message);\n                return;\n            }\n        } catch (e) {\n            console.log(\"Failed to parse event msg as json: \", msg, e.message);\n            return;\n        }\n\n        if (eventType == \"status\") {\n            if (data[\"status\"] != null) {\n                this.status = data.status;\n            } else if (data[\"esp version\"] != null) {\n                this.system.espFwRevision = data[\"esp version\"];\n            } else if (data[\"TI version\"] != null) {\n                this.system.TiFwRevision = data[\"TI version\"];\n            }\n        }\n    }\n\n    updateFromRx(topic, msg) {\n        let elms = topic.split(\"/\");\n        \n        let subtopic = elms[3];\n\n        if (subtopic == \"system\") {\n            this.updateSystemProp(elms[4], msg);\n        } else if (subtopic == \"metadata\") {\n            this.updateMetadataProp(elms[4], msg);\n        } else if (subtopic == \"params\") {\n            this.updateParamProp(elms[4], msg);\n        } else if (subtopic == \"events\") {\n            this.updateEventProp(elms.slice(4), msg);\n        }\n    }\n\n    toString() {\n        let s = [\"----------------------------------------\"];\n        s.push(this.id);\n        s.push(\"----------------------------------------\");\n        s.push(\"Status: \" + this.status);\n\n        s.push(\"----System Properties----\");\n        for (let t in this.system) {\n            s.push(t + \": \" + this.system[t]);\n        }\n\n        s.push(\"----Metadata----\");\n        for (let t in this.metadata) {\n            s.push(t + \": \" + this.metadata[t]);\n        }\n\n        s.push(\"----Sensor Parameters----\");\n        for (let t in this.params) {\n            s.push(t + \": \" + this.params[t]);\n        }\n\n        return s.join(\"\\n\");\n    }\n\n    static extractDeviceString(topic) {\n        let elms = topic.split(\"/\");\n\n        if (elms.length <= 3) {\n            return null;\n        }\n\n        let devStr = elms[2];\n\n        if (!devStr.startsWith(\"AW\") || devStr.length != 6)\n        {\n            return null;\n        }\n\n        return devStr;\n    }\n\n    static getDeviceForTopic(topic) {\n        let devIdStr = Device.extractDeviceString(topic);\n\n        if (!devIdStr) {\n            return null;\n        }\n\n        if (devices[devIdStr] != null) {\n            // return existing device for this device string\n            return devices[devIdStr];\n        }\n\n        // device not found yet. Create it and add it to our data store.\n        devices[devIdStr] = new Device(devIdStr);\n\n        return devices[devIdStr];\n    }\n\n    static getDevices() {\n        return devices;\n    }\n}\n","import mqtt from '@taoqf/react-native-mqtt';\nimport * as CONST from './constants';\nimport Device from \"./device_mdl\";\n\nvar notify_tmo = null;\nlet callbacks = [];\nconst MQTT_CNX = mqtt.connect(CONST.BROKER);\n\nMQTT_CNX.on('message', onMessageRx);\n\nMQTT_CNX.on('connect', (err, arg2) => {\n    console.log(\"connected to MQTT broker\");\n\n    MQTT_CNX.subscribe(CONST.MQTT_MAIN_TOPIC + \"/#\", err => {\n        if (!err) {\n          console.debug(\"Subscribe successful\");\n        } else {\n          console.warn('Failed to subscribe');\n          alert('ERROR: Unable to reach MQTT Server: ', err);\n        }\n      }\n    );\n});\n\nlet count = 0;\nfunction onMessageRx(topic, message) {\n\n    if (count++ % 100 == 0) {\n        console.log(topic, message.toString());\n    }\n\n    // get the device, or create it\n    let device = Device.getDeviceForTopic(topic);\n\n    if (device == null) {\n        // no valid device found in topic string\n        return;\n    }\n\n    // set new data\n    device.updateFromRx(topic, message.toString());\n\n    clearTimeout(notify_tmo);\n\n    // notify UI via callback\n    notify_tmo = setTimeout(notify, 200);\n}\n\nfunction notify() {\n    console.log(\"Notifying!\");\n\n    let devices = Device.getDevices();\n\n    for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](devices);\n    }\n\n}\n\nexport function subscribe(cb) {\n    callbacks.push(cb);\n}\n\nexport function unsubscribe(cb) {\n    let idxToRemove = -1;\n    for (let i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] == cb) {\n            idxToRemove = i;\n            break;\n        }\n    }\n\n    if (idxToRemove > -1) {\n        callbacks.splice(idxToRemove, 1);\n    }\n}","import { StatusBar } from 'expo-status-bar';\nimport React, {useState, useEffect} from 'react';\nimport { StyleSheet, Text, View, Dimensions, ScrollView, SafeAreaView, Pressable } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport * as STYLES from \"./commonStyles\";\n\nimport \"react-native-svg\";\nimport { BarChart, PieChart } from \"react-native-chart-kit\";\nimport { TEST_DEVICES } from './test_data';\n\nimport * as DataProv from \"./data_provider\";\nimport Device from \"./device_mdl\";\n\n\nconst screenWidth = Dimensions.get(\"window\").width;\nconst screenHeight = Dimensions.get(\"window\").height;\n\nlet EMPTY_BAR_DATA = {\n    labels: [],\n    datasets: [\n        {\n            data: [],\n            colors: []\n        }\n    ]\n};\n\nconst getChartWidth = () => {\n    if (screenWidth > 400) {\n        return screenWidth / 3;\n    } else {\n        return screenWidth / 1.4;\n    }\n};\n\nfunction CommonBarChart(props) {\n    let horizLines = 3;\n\n    if (!props.data || !props.data.length) {\n        horizLines = 2;\n    }\n\n    return (\n        <View style={[styles.chartContainer]}>\n            <View style={styles.chartWrap}>\n                <Text style={styles.chartHeader}>{props.title}</Text>\n                <BarChart\n                    key={Math.random() + \"\"}\n                    style={{\n                        marginVertical: 8,\n                        borderRadius: 16,\n                        \n                    }}\n                    data={props.data}\n                    width={getChartWidth()}\n                    height={200}\n                    chartConfig={STYLES.CHART_CONFIG}\n                    yAxisInterval={10}\n                    segments={horizLines}\n                    yLabelsOffset={props.yLabelsOffset || 35}\n                    withCustomBarColorFromData\n                    flatColor\n                    fromZero\n                    withInnerLines\n                    showValuesOnTopOfBars\n                    showBarTops={false}\n                    {...props}\n                />\n            </View>\n        </View>\n    );\n}\n\nfunction ConnectedStatusChart() {\n    const [connected, setConnected] = useState([]);\n    const [disconnected, setDisconnected] = useState([]);\n\n    const handleNewData = (devices) => {\n        let connectedDevs = [];\n        let disconnDevs = [];\n        for (let d in devices) {\n            if (devices[d].status != 99) {\n                connectedDevs.push(d);\n            } else {\n                disconnDevs.push(d);\n            }\n        }\n\n        setConnected(connectedDevs);\n        setDisconnected(disconnDevs);\n    };\n\n    useEffect(() => {\n        // subscribe to our data provider\n        DataProv.subscribe(handleNewData);\n    }, [])\n\n\n    let data = {\n        labels: [\"Connected\", \"Disconnected\"],\n        datasets: [\n            {\n                data: [connected.length, disconnected.length],\n                colors: [() => \"#00FF00\", () => \"red\"]\n            }\n        ]\n    };\n\n    return (\n        <CommonBarChart data={data} title={\"Connection Status\"}/>\n    );\n}\n\nfunction VersionPieChart(props) {\n    const [versionCounts, setversionCounts] = useState([]);\n\n    let versionProp = \"\";\n    let chartTitle = \"\";\n    if (props.processor == \"ESP\") {\n        versionProp = \"espFwRevision\";\n        chartTitle = \"ESP32 Firmware\";\n    } else {\n        versionProp = \"TiFwRevision\";\n        chartTitle = \"MSP430 Firmware\";\n    }\n\n    const handleNewData = (devices) => {\n        let counts = {};\n\n        for (let d in devices) {\n            if (props.connectedOnly && devices[d].status == 99) continue;\n\n            let thisVers = devices[d].system[versionProp];\n\n            if (!thisVers) {\n                thisVers = \"Unknown\";\n            } else {\n                thisVers = \"v\" + thisVers;\n            }\n\n            if (counts[thisVers] == null) {\n                counts[thisVers] = 1;\n            } else {\n                counts[thisVers] += 1;\n            }\n        }\n\n        let colorMap = [\"#886677\", \"#33DDBB\", \"yellow\", \"cyan\", \"#CC7777\", \"#CDCDCD\", \"#00FF00\", \"gray\"]\n\n        let countsArr = Object.keys(counts).map((vers, idx) => {\n            let color;\n            if (idx >= colorMap.length) {\n                // random color\n                color = \"#\" + Math.random().toString(16).slice(-6);\n            } else {\n                color = colorMap[idx];   \n            }\n            return {\n                name: `(${vers})`,\n                count: counts[vers],\n                color: color,\n                legendFontColor: '#7F7F7F',\n                legendFontSize: 15,\n            };\n        })\n\n        setversionCounts(countsArr);\n    };\n\n    useEffect(() => {\n        // subscribe to our data provider\n        DataProv.subscribe(handleNewData);\n    }, [])\n\n    useEffect(() => {\n        // subscribe to our data provider\n        handleNewData(Device.getDevices());\n\n        return function cleanup() {\n            DataProv.unsubscribe(handleNewData);\n        }\n    }, [props.connectedOnly])\n\n    return (\n        <View style={[styles.chartContainer]}>\n            <View style={[styles.chartWrap]}>\n                <Text style={styles.chartHeader}>{chartTitle}</Text>\n                <PieChart\n                    accessor=\"count\"\n                    data={versionCounts}\n                    width={getChartWidth()}\n                    height={150}\n                    chartConfig={STYLES.CHART_CONFIG}\n                    backgroundColor={\"#FFFFFF00\"}\n                    withCustomBarColorFromData\n                    flatColor\n                    absolute\n                />\n            </View>\n        </View>\n    );\n}\n\nfunction WifiSignal(props) {\n    const [wifiSignals, setWifiSignals] = useState(EMPTY_BAR_DATA);\n\n    const handleNewData = (devices) => {\n        let signalGroups = {\"?\": 0};\n\n        for (let d in devices) {\n            if (props.connectedOnly && devices[d].status == 99) continue;\n\n            let thisSignal = devices[d].system.wifiRxSignaldB;\n            thisSignal = parseInt(thisSignal);\n\n            if (isNaN(thisSignal)) {\n                signalGroups[\"?\"] += 1;\n            } else {\n                // round to nearest 10\n                thisSignal = Math.ceil(thisSignal / 10) * 10;\n                \n                if (signalGroups[thisSignal] == null) {\n                    signalGroups[thisSignal] = 1;\n                } else {\n                    signalGroups[thisSignal] += 1;\n                }\n            }\n        }\n\n        let dataObj = {...EMPTY_BAR_DATA}; \n        dataObj.labels = Object.keys(signalGroups).sort();\n        dataObj.datasets = [{\n                data: dataObj.labels.map(l => signalGroups[l]),\n                colors: dataObj.labels.map((l, idx) => () => `rgb(${idx*40}, ${255 - idx*40}, 0)`)\n            }\n        ];\n      \n        setWifiSignals(dataObj);\n    };\n\n    useEffect(() => {\n        // subscribe to our data provider\n        DataProv.subscribe(handleNewData);\n    }, []);\n      \n    useEffect(() => {\n        // subscribe to our data provider\n        handleNewData(Device.getDevices());\n\n        return function cleanup() {\n            DataProv.unsubscribe(handleNewData);\n        }\n    }, [props.connectedOnly])\n\n    return (\n        <CommonBarChart \n            key={\"wifi\"}\n            data={wifiSignals}\n            title={\"Wifi Signal Level\"}\n            verticalLabelRotation={screenWidth > 400 ? undefined : 30}\n            yLabelsOffset={10}\n            width={screenWidth > 400 ? screenWidth * 0.7 : screenWidth-20}\n            chartConfig={{\n                ...STYLES.CHART_CONFIG,\n                barPercentage: screenWidth > 400 ? 0.8 : 0.3\n            }}\n            style={{\n                marginLeft: -40, \n                width: screenWidth > 400 ? screenWidth * 0.7 : screenWidth-20\n            }}\n        />\n    );\n}\n\nfunction SideBySideOrStacked(props) {\n    if (screenWidth > 400) {\n        return (\n            <View style={{flexDirection: \"row\"}}>\n                {props.children}\n            </View>\n        )\n    }\n    else {\n        return props.children;\n    }\n}\n\nfunction Dashboard(props) {\n    return (\n        <View style={{flex: 1, margin: 8, alignItems: \"center\"}}>\n            <ConnectedStatusChart/>\n            <SideBySideOrStacked>\n                <VersionPieChart key={Math.random() + \"\"} processor=\"ESP\" connectedOnly={props.connectedOnly}/>\n                <VersionPieChart key={Math.random() + \"\"} processor=\"MSP\" connectedOnly={props.connectedOnly}/>\n            </SideBySideOrStacked>\n            <WifiSignal key={Math.random() + \"\"} connectedOnly={props.connectedOnly}/>\n        </View>\n    );\n}\n\nfunction ScreenHeader(props) {\n\n    return (\n        <View style={styles.screenHeaderWrap}>\n            <View style={styles.screenHeader}>\n                <Text style={styles.screenHeaderTxt}>AWACS Dashboard</Text>\n                <Pressable style={[styles.button, {backgroundColor: props.connectedOnly ? \"#99FFAA\" : \"#EAEAEA\"}]} \n                    onPress={() => {\n                        props.setConnectedFilter(!props.connectedOnly);\n                    }}\n                >\n                    <Ionicons name=\"md-filter\" size={22} color=\"green\" />\n                </Pressable>\n            </View>\n        </View>\n    )\n}\n\nexport default function App() {\n  const [connectedOnly, setConnectedOnly] = useState(false);\n\n  return (\n    <SafeAreaView style={styles.root}>\n        <View style={styles.container}>\n        <StatusBar style=\"auto\" />\n        <ScreenHeader connectedOnly={connectedOnly} setConnectedFilter={(isFiltered) => \n                setConnectedOnly(isFiltered)\n        }/>\n        <ScrollView>\n            <Dashboard connectedOnly={connectedOnly} />\n        </ScrollView>\n    </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n    root: {\n        backgroundColor: \"white\",\n        flex: 1,\n    },\n    screenHeaderWrap: {\n        height: (screenHeight / 10) + 8,\n        minHeight: 80 + 8,\n        overflow: 'hidden',\n    },\n    screenHeader: {\n        height: screenHeight / 10,\n        minHeight: 80,\n        backgroundColor: \"white\",\n        width: screenWidth,\n        justifyContent: \"space-between\",\n        alignItems: \"flex-end\",\n        flexDirection: 'row',\n        padding: 10,\n        shadowColor: \"#000\",\n        shadowOpacity: 0.3,\n        shadowRadius: 7,\n        paddingRight: screenWidth > 400 ? 30 : 10\n  },\n  screenHeaderTxt: {\n    fontSize: 22,\n    fontWeight: \"bold\",\n    color: \"#535353\"\n  },\n  button: {\n    padding: 5,\n    borderRadius: 10,\n    shadowColor: \"#000\",\n    shadowOpacity: 0.2,\n    shadowRadius: 2,\n    shadowOffset: {\n        width: 0,\n        height: 2\n    }\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#EFEFEF',\n  },\n  chartContainer: {\n    borderRadius: 20,\n    marginHorizontal: 25,\n    marginBottom: 25,\n    shadowColor: \"#000\",\n    shadowOpacity: 0.3,\n    shadowRadius: 7,\n    shadowOffset: {\n        width: 0,\n        height: 3\n    },\n  },\n  chartWrap: {\n    padding: 10,\n    borderRadius: 20,\n    backgroundColor: '#FFFFFF',\n    overflow: \"hidden\"\n  },\n  chartHeader: {\n    fontSize: 15,\n    padding: 5,\n    marginBottom: 10,\n    fontWeight: \"bold\",\n    color: STYLES.COLORS.darkGreyText\n  },\n});\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}